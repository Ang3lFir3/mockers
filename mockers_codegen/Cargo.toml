[package]
name = "mockers_codegen"
version = "0.7.1"
description = "Compiler plugin for 'mockers' mocking library"
authors = ["Mikhail Trishchenkov <kriomant@gmail.com>"]
repository = "https://github.com/kriomant/mockers"
keywords = ["mock", "test"]
license = "MIT"

build = "build.rs"

[features]

# In default configuration codegen uses nightly Rust compiler internals.
# This configuration is used by `mockers_macro` compiler plugin and it
# works with nightly Rust only.
default = []

# Aternatively library may be configured to use `syntex` library for
# code parsing and generation.
# It is used for code generation approach, which is the only possible way
# on stable Rust.
# Additionally, this configuration is used by `mockers_derive` library,
# which uses unfinished "macros 1.1" Rust feature
# (https://github.com/rust-lang/rust/issues/35900). This feature isn't yet
# ready, but it will allow to use macros on stable Rust, so it's better to
# be ready for it.
with-syntex = ["syntex", "syntex_syntax", "quasi", "quasi_codegen"]

# Show generated code.
debug = []

[dependencies]
itertools = "0.4.13"
syntex = { version = "0.58.1", optional = true }
syntex_syntax = { version = "0.58.1", optional = true }
quasi = { version = "0.32.0", features = ["with-syntex"], optional = true }

[build-dependencies]
# It isn't really needed in `default` configuration, but `build-dependencies`
# cannot be modified by features, AFAIK.
quasi_codegen = { version = "0.32.0", features = ["with-syntex"], optional = true }

[lib]
name = "mockers_codegen"
